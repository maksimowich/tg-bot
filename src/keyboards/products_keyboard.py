from aiogram import types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types.input_file import FSInputFile

PAGE_SIZE = 3


async def show_products(
        message: types.Message,
        state: FSMContext,
):
    products = [
        {"id": 1, "name": "–¢–æ–≤–∞—Ä 1", "price": 100, "photo": "../xxx.jpg"},
        {"id": 2, "name": "–¢–æ–≤–∞—Ä 2", "price": 200, "photo": "../xxx.jpg"},
        {"id": 3, "name": "–¢–æ–≤–∞—Ä 3", "price": 200, "photo": "../xxx.jpg"},
        {"id": 4, "name": "–¢–æ–≤–∞—Ä 4", "price": 200, "photo": "../xxx.jpg"},
        {"id": 5, "name": "–¢–æ–≤–∞—Ä 5", "price": 200, "photo": "../xxx.jpg"},
        {"id": 6, "name": "–¢–æ–≤–∞—Ä 6", "price": 200, "photo": "../xxx.jpg"},
        {"id": 7, "name": "–¢–æ–≤–∞—Ä 7", "price": 200, "photo": "../xxx.jpg"},
        {"id": 8, "name": "–¢–æ–≤–∞—Ä 8", "price": 200, "photo": "../xxx.jpg"},
        {"id": 9, "name": "–¢–æ–≤–∞—Ä 9", "price": 200, "photo": "../xxx.jpg"},
        {"id": 10, "name": "–¢–æ–≤–∞—Ä 10", "price": 200, "photo": "../xxx.jpg"},
    ]

    data = await state.get_data()
    current_page = data.get("current_page", 0)

    start = current_page * PAGE_SIZE
    end = start + PAGE_SIZE
    page_products = products[start:end]

    for product in page_products:
        text = f"üì¶ {product['name']}\nüí∞ {product['price']} —Ä—É–±."
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üõí –ü–æ–ª–æ–∂–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_to_cart_product_{product['id']}",
        )
        await message.answer_photo(
            photo=FSInputFile(product["photo"]),
            caption=text,
            reply_markup=builder.as_markup()
        )

    builder = InlineKeyboardBuilder()
    if current_page > 0:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="prev_products_page",
        )
    if end < len(products):
        builder.button(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data="next_products_page",
        )

    total_pages = (
        (len(products) // PAGE_SIZE) + (1 if len(products) % PAGE_SIZE != 0 else 0)
    )
    await message.answer(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=builder.as_markup(),
    )
