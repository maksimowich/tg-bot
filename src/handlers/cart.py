from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()


class CartState(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_confirmation = State()


@router.callback_query(lambda c: c.data.startswith("add_to_cart_product_"))
async def add_to_cart(
        callback: types.CallbackQuery,
        state: FSMContext,
):
    product_id = int(callback.data.split("_")[-1])

    await state.update_data(product_id=product_id)
    await state.set_state(CartState.waiting_for_quantity)

    await callback.message.answer(
        f"–¢–æ–≤–∞—Ä {product_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "view_cart")
async def view_cart(
        callback: types.CallbackQuery,
        state: FSMContext,
):
    data = await state.get_data()
    cart = data.get("cart", [])

    if not cart:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

    else:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        builder = InlineKeyboardBuilder()

        for item in cart:
            text += f"üì¶ –¢–æ–≤–∞—Ä {item['product_id']} ‚Äî {item['quantity']} —à—Ç.\n"
            builder.button(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä {item['product_id']}",
                callback_data=f"remove_from_cart_{item['product_id']}",
            )

        builder.button(
            text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
            callback_data="clear_cart",
        )

        builder.button(
            text="Ô∏è–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑",
            callback_data="make_order",
        )

        await callback.message.answer(
            text,
            reply_markup=builder.as_markup(),
        )
        await callback.answer()


@router.callback_query(lambda c: c.data.startswith("remove_from_cart_"))
async def remove_from_cart(
        callback: types.CallbackQuery,
        state: FSMContext,
):
    product_id = int(callback.data.split("_")[-1])
    data = await state.get_data()
    cart = data.get("cart", [])

    cart = [item for item in cart if item["product_id"] != product_id]

    await state.update_data(cart=cart)

    await callback.message.delete()

    await callback.message.answer(f"–¢–æ–≤–∞—Ä {product_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
    await view_cart(callback, state)


@router.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(
        callback: types.CallbackQuery,
        state: FSMContext,
):
    await state.update_data(cart=[])

    await callback.message.delete()

    await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await view_cart(callback, state)


@router.message(CartState.waiting_for_quantity)
async def process_quantity(
        message: types.Message,
        state: FSMContext,
):
    data = await state.get_data()
    cart = data.get("cart", [])
    product_id = data.get("product_id")

    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    for item in cart:
        if item["product_id"] == product_id:
            item["quantity"] = quantity
            break

    await state.update_data(quantity=quantity)
    await state.set_state(CartState.waiting_for_confirmation)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_add"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_add"),
        ]
    ])

    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä {product_id} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É?",
        reply_markup=keyboard,
    )


@router.callback_query(CartState.waiting_for_confirmation, lambda c: c.data == "confirm_add")
async def confirm_add(
        callback: types.CallbackQuery,
        state: FSMContext,
):
    data = await state.get_data()
    product_id = data.get("product_id")
    quantity = data.get("quantity")
    cart = data.get("cart", [])

    cart.append({"product_id": product_id, "quantity": quantity})

    await state.update_data(cart=cart)

    await callback.message.delete()
    await callback.message.answer(f"–¢–æ–≤–∞—Ä {product_id} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç. –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await callback.answer()


@router.callback_query(CartState.waiting_for_confirmation, lambda c: c.data == "cancel_add")
async def cancel_add(
        callback: types.CallbackQuery,
        state: FSMContext,
):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

